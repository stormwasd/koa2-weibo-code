/**
 * @description 加密方法
 * @author JackLiLi
 * @type {{X25519KeyPairKeyObjectOptions: X25519KeyPairKeyObjectOptions, fips: boolean, SecureHeapUsage: SecureHeapUsage, randomBytes: (size: number) => Buffer, JsonWebKey: JsonWebKey, X509CheckOptions: X509CheckOptions, SignKeyObjectInput: SignKeyObjectInput, createSecretKey: (key: NodeJS.ArrayBufferView) => KeyObject, KeyType: "rsa" | "rsa-pss" | "dsa" | "ec" | "ed25519" | "ed448" | "x25519" | "x448", GeneratePrimeOptions: GeneratePrimeOptions, getHashes: () => string[], X448KeyPairKeyObjectOptions: X448KeyPairKeyObjectOptions, createDecipheriv: (algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions) => DecipherCCM, DEFAULT_ENCODING: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", Hash: Hash, CipherInfoOptions: CipherInfoOptions, checkPrime: (value: LargeNumberLike, callback: (err: (Error | null), result: boolean) => void) => void, RSAPSSKeyPairOptions: RSAPSSKeyPairOptions, createPrivateKey: (key: (PrivateKeyInput | string | Buffer | JsonWebKeyInput)) => KeyObject, createSign: (algorithm: string, options?: stream.WritableOptions) => Sign, generateKeySync: (type: ("hmac" | "aes"), options: {length: number}) => KeyObject, createHmac: (algorithm: string, key: (BinaryLike | KeyObject), options?: stream.TransformOptions) => Hmac, randomUUID: (options?: RandomUUIDOptions) => string, diffieHellman: (options: {privateKey: KeyObject, publicKey: KeyObject}) => Buffer, AsymmetricKeyDetails: AsymmetricKeyDetails, KeyPairSyncResult: KeyPairSyncResult, createCipher: (algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions) => CipherCCM, publicEncrypt: (key: (RsaPublicKey | RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, getRandomValues: <T extends webcrypto.BufferSource>(typedArray: T) => T, CipherKey: string | Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigUint64Array | BigInt64Array | Float32Array | Float64Array | DataView | KeyObject, DSAEncoding: "der" | "ieee-p1363", ECKeyPairKeyObjectOptions: ECKeyPairKeyObjectOptions, getCurves: () => string[], Certificate: Certificate, hkdfSync: (digest: string, ikm: (BinaryLike | KeyObject), salt: BinaryLike, info: BinaryLike, keylen: number) => ArrayBuffer, generateKeyPair: (type: "rsa", options: RSAKeyPairOptions<"pem", "pem">, callback: (err: (Error | null), publicKey: string, privateKey: string) => void) => void, Encoding: "base64" | "base64url" | "hex" | "binary" | "utf8" | "utf-8" | "utf16le" | "latin1" | "ascii" | "binary" | "ucs2" | "ucs-2", X25519KeyPairOptions: X25519KeyPairOptions, CipherMode: "cbc" | "ccm" | "cfb" | "ctr" | "ecb" | "gcm" | "ocb" | "ofb" | "stream" | "wrap" | "xts", DecipherGCM: DecipherGCM, BinaryLike: string | Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigUint64Array | BigInt64Array | Float32Array | Float64Array | DataView, createHash: (algorithm: string, options?: HashOptions) => Hash, VerifyPublicKeyInput: VerifyPublicKeyInput, VerifyKeyObjectInput: VerifyKeyObjectInput, setEngine: (engine: string, flags?: number) => void, DiffieHellman: DiffieHellman, generatePrime: (size: number, callback: (err: (Error | null), prime: ArrayBuffer) => void) => void, DecipherCCM: DecipherCCM, publicDecrypt: (key: (RsaPublicKey | RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, CipherGCMOptions: CipherGCMOptions, randomInt: (max: number) => number, KeyObjectType: "secret" | "public" | "private", createVerify: (algorithm: string, options?: stream.WritableOptions) => Verify, Decipher: Decipher, scrypt: (password: BinaryLike, salt: BinaryLike, keylen: number, callback: (err: (Error | null), derivedKey: Buffer) => void) => void, CipherOCBTypes: "aes-128-ocb" | "aes-192-ocb" | "aes-256-ocb", createPublicKey: (key: (PublicKeyInput | string | Buffer | KeyObject | JsonWebKeyInput)) => KeyObject, privateEncrypt: (privateKey: (RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, getCiphers: () => string[], ECDHKeyFormat: "compressed" | "uncompressed" | "hybrid", SignPrivateKeyInput: SignPrivateKeyInput, pbkdf2: (password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string, callback: (err: (Error | null), derivedKey: Buffer) => void) => void, RsaPublicKey: RsaPublicKey, LargeNumberLike: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigUint64Array | BigInt64Array | Float32Array | Float64Array | DataView | SharedArrayBuffer | ArrayBuffer | bigint, CheckPrimeOptions: CheckPrimeOptions, createCipheriv: (algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions) => CipherCCM, pbkdf2Sync: (password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string) => Buffer, RSAKeyPairOptions: RSAKeyPairOptions, HashOptions: HashOptions, secureHeapUsed: () => SecureHeapUsage, DecipherOCB: DecipherOCB, createDecipher: (algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions) => DecipherCCM, DSAKeyPairOptions: DSAKeyPairOptions, RSAKeyPairKeyObjectOptions: RSAKeyPairKeyObjectOptions, PrivateKeyInput: PrivateKeyInput, privateDecrypt: (privateKey: (RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, generateKey: (type: ("hmac" | "aes"), options: {length: number}, callback: (err: (Error | null), key: KeyObject) => void) => void, constants: constants, webcrypto: webcrypto.Crypto, BinaryToTextEncoding: "base64" | "base64url" | "hex" | "binary", Cipher: Cipher, CipherGCMTypes: "aes-128-gcm" | "aes-192-gcm" | "aes-256-gcm", PublicKeyInput: PublicKeyInput, CipherOCBOptions: CipherOCBOptions, BasePrivateKeyEncodingOptions: BasePrivateKeyEncodingOptions, KeyExportOptions: KeyExportOptions, JsonWebKeyInput: JsonWebKeyInput, X509Certificate: X509Certificate, CipherCCMTypes: "aes-128-ccm" | "aes-192-ccm" | "aes-256-ccm" | "chacha20-poly1305", ED25519KeyPairKeyObjectOptions: ED25519KeyPairKeyObjectOptions, KeyPairKeyObjectResult: KeyPairKeyObjectResult, SigningOptions: SigningOptions, RandomUUIDOptions: RandomUUIDOptions, CipherCCMOptions: CipherCCMOptions, KeyFormat: "pem" | "der" | "jwk", getCipherInfo: (nameOrNid: (string | number), options?: CipherInfoOptions) => (CipherInfo | undefined), subtle: webcrypto.SubtleCrypto, DiffieHellmanGroup: DiffieHellmanGroupConstructor, CipherInfo: CipherInfo, RSAPSSKeyPairKeyObjectOptions: RSAPSSKeyPairKeyObjectOptions, DiffieHellmanGroupConstructor: DiffieHellmanGroupConstructor, randomFill: <T extends NodeJS.ArrayBufferView>(buffer: T, callback: (err: (Error | null), buf: T) => void) => void, pseudoRandomBytes: (size: number) => Buffer, createDiffieHellman: (primeLength: number, generator?: number) => DiffieHellman, CipherCCM: CipherCCM, ScryptOptions: ScryptOptions, randomFillSync: <T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number, size?: number) => T, Verify: Verify, JwkKeyExportOptions: JwkKeyExportOptions, RsaPrivateKey: RsaPrivateKey, checkPrimeSync: (candidate: LargeNumberLike, options?: CheckPrimeOptions) => boolean, generatePrimeSync: (size: number) => ArrayBuffer, ED448KeyPairKeyObjectOptions: ED448KeyPairKeyObjectOptions, ECKeyPairOptions: ECKeyPairOptions, scryptSync: (password: BinaryLike, salt: BinaryLike, keylen: number, options?: ScryptOptions) => Buffer, KeyObject: KeyObject, createDiffieHellmanGroup: (name: string) => DiffieHellmanGroup, generateKeyPairSync: (type: "rsa", options: RSAKeyPairOptions<"pem", "pem">) => KeyPairSyncResult<string, string>, ED448KeyPairOptions: ED448KeyPairOptions, sign: (algorithm: (string | null | undefined), data: NodeJS.ArrayBufferView, key: (KeyLike | SignKeyObjectInput | SignPrivateKeyInput)) => Buffer, verify: (algorithm: (string | null | undefined), data: NodeJS.ArrayBufferView, key: (KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput), signature: NodeJS.ArrayBufferView) => boolean, hkdf: (digest: string, irm: (BinaryLike | KeyObject), salt: BinaryLike, info: BinaryLike, keylen: number, callback: (err: (Error | null), derivedKey: ArrayBuffer) => void) => void, GeneratePrimeOptionsBigInt: GeneratePrimeOptionsBigInt, createECDH: (curveName: string) => ECDH, DSAKeyPairKeyObjectOptions: DSAKeyPairKeyObjectOptions, ED25519KeyPairOptions: ED25519KeyPairOptions, CharacterEncoding: "utf8" | "utf-8" | "utf16le" | "latin1", CipherOCB: CipherOCB, timingSafeEqual: (a: NodeJS.ArrayBufferView, b: NodeJS.ArrayBufferView) => boolean, Sign: Sign, X448KeyPairOptions: X448KeyPairOptions, Hmac: Hmac, setFips: (bool: boolean) => void, GeneratePrimeOptionsArrayBuffer: GeneratePrimeOptionsArrayBuffer, getFips: () => (1 | 0), getDiffieHellman: (groupName: string) => DiffieHellmanGroup, LegacyCharacterEncoding: "ascii" | "binary" | "ucs2" | "ucs-2", ECDH: ECDH, CipherGCM: CipherGCM, KeyLike: string | Buffer | KeyObject} | {X25519KeyPairKeyObjectOptions: X25519KeyPairKeyObjectOptions, fips: boolean, SecureHeapUsage: SecureHeapUsage, randomBytes: (size: number) => Buffer, JsonWebKey: JsonWebKey, X509CheckOptions: X509CheckOptions, SignKeyObjectInput: SignKeyObjectInput, createSecretKey: (key: NodeJS.ArrayBufferView) => KeyObject, KeyType: "rsa" | "rsa-pss" | "dsa" | "ec" | "ed25519" | "ed448" | "x25519" | "x448", GeneratePrimeOptions: GeneratePrimeOptions, getHashes: () => string[], X448KeyPairKeyObjectOptions: X448KeyPairKeyObjectOptions, createDecipheriv: (algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions) => DecipherCCM, DEFAULT_ENCODING: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", Hash: Hash, CipherInfoOptions: CipherInfoOptions, checkPrime: (value: LargeNumberLike, callback: (err: (Error | null), result: boolean) => void) => void, RSAPSSKeyPairOptions: RSAPSSKeyPairOptions, createPrivateKey: (key: (PrivateKeyInput | string | Buffer | JsonWebKeyInput)) => KeyObject, createSign: (algorithm: string, options?: stream.WritableOptions) => Sign, generateKeySync: (type: ("hmac" | "aes"), options: {length: number}) => KeyObject, createHmac: (algorithm: string, key: (BinaryLike | KeyObject), options?: stream.TransformOptions) => Hmac, randomUUID: (options?: RandomUUIDOptions) => string, diffieHellman: (options: {privateKey: KeyObject, publicKey: KeyObject}) => Buffer, AsymmetricKeyDetails: AsymmetricKeyDetails, KeyPairSyncResult: KeyPairSyncResult, createCipher: (algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions) => CipherCCM, publicEncrypt: (key: (RsaPublicKey | RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, getRandomValues: <T extends webcrypto.BufferSource>(typedArray: T) => T, CipherKey: string | Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigUint64Array | BigInt64Array | Float32Array | Float64Array | DataView | KeyObject, DSAEncoding: "der" | "ieee-p1363", ECKeyPairKeyObjectOptions: ECKeyPairKeyObjectOptions, getCurves: () => string[], Certificate: Certificate, hkdfSync: (digest: string, ikm: (BinaryLike | KeyObject), salt: BinaryLike, info: BinaryLike, keylen: number) => ArrayBuffer, generateKeyPair: (type: "rsa", options: RSAKeyPairOptions<"pem", "pem">, callback: (err: (Error | null), publicKey: string, privateKey: string) => void) => void, Encoding: "base64" | "base64url" | "hex" | "binary" | "utf8" | "utf-8" | "utf16le" | "latin1" | "ascii" | "binary" | "ucs2" | "ucs-2", X25519KeyPairOptions: X25519KeyPairOptions, CipherMode: "cbc" | "ccm" | "cfb" | "ctr" | "ecb" | "gcm" | "ocb" | "ofb" | "stream" | "wrap" | "xts", DecipherGCM: DecipherGCM, BinaryLike: string | Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigUint64Array | BigInt64Array | Float32Array | Float64Array | DataView, createHash: (algorithm: string, options?: HashOptions) => Hash, VerifyPublicKeyInput: VerifyPublicKeyInput, VerifyKeyObjectInput: VerifyKeyObjectInput, setEngine: (engine: string, flags?: number) => void, DiffieHellman: DiffieHellman, generatePrime: (size: number, callback: (err: (Error | null), prime: ArrayBuffer) => void) => void, DecipherCCM: DecipherCCM, publicDecrypt: (key: (RsaPublicKey | RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, CipherGCMOptions: CipherGCMOptions, randomInt: (max: number) => number, KeyObjectType: "secret" | "public" | "private", createVerify: (algorithm: string, options?: stream.WritableOptions) => Verify, Decipher: Decipher, scrypt: (password: BinaryLike, salt: BinaryLike, keylen: number, callback: (err: (Error | null), derivedKey: Buffer) => void) => void, CipherOCBTypes: "aes-128-ocb" | "aes-192-ocb" | "aes-256-ocb", createPublicKey: (key: (PublicKeyInput | string | Buffer | KeyObject | JsonWebKeyInput)) => KeyObject, privateEncrypt: (privateKey: (RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, getCiphers: () => string[], ECDHKeyFormat: "compressed" | "uncompressed" | "hybrid", SignPrivateKeyInput: SignPrivateKeyInput, pbkdf2: (password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string, callback: (err: (Error | null), derivedKey: Buffer) => void) => void, RsaPublicKey: RsaPublicKey, LargeNumberLike: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigUint64Array | BigInt64Array | Float32Array | Float64Array | DataView | SharedArrayBuffer | ArrayBuffer | bigint, CheckPrimeOptions: CheckPrimeOptions, createCipheriv: (algorithm: CipherCCMTypes, key: CipherKey, iv: BinaryLike, options: CipherCCMOptions) => CipherCCM, pbkdf2Sync: (password: BinaryLike, salt: BinaryLike, iterations: number, keylen: number, digest: string) => Buffer, RSAKeyPairOptions: RSAKeyPairOptions, HashOptions: HashOptions, secureHeapUsed: () => SecureHeapUsage, DecipherOCB: DecipherOCB, createDecipher: (algorithm: CipherCCMTypes, password: BinaryLike, options: CipherCCMOptions) => DecipherCCM, DSAKeyPairOptions: DSAKeyPairOptions, RSAKeyPairKeyObjectOptions: RSAKeyPairKeyObjectOptions, PrivateKeyInput: PrivateKeyInput, privateDecrypt: (privateKey: (RsaPrivateKey | KeyLike), buffer: NodeJS.ArrayBufferView) => Buffer, generateKey: (type: ("hmac" | "aes"), options: {length: number}, callback: (err: (Error | null), key: KeyObject) => void) => void, constants: constants, webcrypto: webcrypto.Crypto, BinaryToTextEncoding: "base64" | "base64url" | "hex" | "binary", Cipher: Cipher, CipherGCMTypes: "aes-128-gcm" | "aes-192-gcm" | "aes-256-gcm", PublicKeyInput: PublicKeyInput, CipherOCBOptions: CipherOCBOptions, BasePrivateKeyEncodingOptions: BasePrivateKeyEncodingOptions, KeyExportOptions: KeyExportOptions, JsonWebKeyInput: JsonWebKeyInput, X509Certificate: X509Certificate, CipherCCMTypes: "aes-128-ccm" | "aes-192-ccm" | "aes-256-ccm" | "chacha20-poly1305", ED25519KeyPairKeyObjectOptions: ED25519KeyPairKeyObjectOptions, KeyPairKeyObjectResult: KeyPairKeyObjectResult, SigningOptions: SigningOptions, RandomUUIDOptions: RandomUUIDOptions, CipherCCMOptions: CipherCCMOptions, KeyFormat: "pem" | "der" | "jwk", getCipherInfo: (nameOrNid: (string | number), options?: CipherInfoOptions) => (CipherInfo | undefined), subtle: webcrypto.SubtleCrypto, DiffieHellmanGroup: DiffieHellmanGroupConstructor, CipherInfo: CipherInfo, RSAPSSKeyPairKeyObjectOptions: RSAPSSKeyPairKeyObjectOptions, DiffieHellmanGroupConstructor: DiffieHellmanGroupConstructor, randomFill: <T extends NodeJS.ArrayBufferView>(buffer: T, callback: (err: (Error | null), buf: T) => void) => void, pseudoRandomBytes: (size: number) => Buffer, createDiffieHellman: (primeLength: number, generator?: number) => DiffieHellman, CipherCCM: CipherCCM, ScryptOptions: ScryptOptions, randomFillSync: <T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number, size?: number) => T, Verify: Verify, JwkKeyExportOptions: JwkKeyExportOptions, RsaPrivateKey: RsaPrivateKey, checkPrimeSync: (candidate: LargeNumberLike, options?: CheckPrimeOptions) => boolean, generatePrimeSync: (size: number) => ArrayBuffer, ED448KeyPairKeyObjectOptions: ED448KeyPairKeyObjectOptions, ECKeyPairOptions: ECKeyPairOptions, scryptSync: (password: BinaryLike, salt: BinaryLike, keylen: number, options?: ScryptOptions) => Buffer, KeyObject: KeyObject, createDiffieHellmanGroup: (name: string) => DiffieHellmanGroup, generateKeyPairSync: (type: "rsa", options: RSAKeyPairOptions<"pem", "pem">) => KeyPairSyncResult<string, string>, ED448KeyPairOptions: ED448KeyPairOptions, sign: (algorithm: (string | null | undefined), data: NodeJS.ArrayBufferView, key: (KeyLike | SignKeyObjectInput | SignPrivateKeyInput)) => Buffer, verify: (algorithm: (string | null | undefined), data: NodeJS.ArrayBufferView, key: (KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput), signature: NodeJS.ArrayBufferView) => boolean, hkdf: (digest: string, irm: (BinaryLike | KeyObject), salt: BinaryLike, info: BinaryLike, keylen: number, callback: (err: (Error | null), derivedKey: ArrayBuffer) => void) => void, GeneratePrimeOptionsBigInt: GeneratePrimeOptionsBigInt, createECDH: (curveName: string) => ECDH, DSAKeyPairKeyObjectOptions: DSAKeyPairKeyObjectOptions, ED25519KeyPairOptions: ED25519KeyPairOptions, CharacterEncoding: "utf8" | "utf-8" | "utf16le" | "latin1", CipherOCB: CipherOCB, timingSafeEqual: (a: NodeJS.ArrayBufferView, b: NodeJS.ArrayBufferView) => boolean, Sign: Sign, X448KeyPairOptions: X448KeyPairOptions, Hmac: Hmac, setFips: (bool: boolean) => void, GeneratePrimeOptionsArrayBuffer: GeneratePrimeOptionsArrayBuffer, getFips: () => (1 | 0), getDiffieHellman: (groupName: string) => DiffieHellmanGroup, LegacyCharacterEncoding: "ascii" | "binary" | "ucs2" | "ucs-2", ECDH: ECDH, CipherGCM: CipherGCM, KeyLike: string | Buffer | KeyObject}}
 */

const crypto = require('crypto')
// 密钥
const { CRYPTO_SECRET_KEY } = require('../conf/secretKeys')

/**
 * md5 加密
 * @param content
 * @private
 */
function _md5(content) {
    const md5 = crypto.createHash('md5')
    return md5.update(content).digest('hex')
}

/**
 * 加密方法
 * @param content
 * @returns {*}
 */
function doCrypto(content) {
    const str = `password=${content}&key=${CRYPTO_SECRET_KEY}`
    return _md5(str)
}

module.exports = doCrypto