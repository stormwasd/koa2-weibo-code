/**
 * @description sequelize 实例
 * @author JackLiLi
 * @type {{QueryTypes: QueryTypes, useInflection: any, Utils: {canTreatArrayAsAnd: (arr: unknown[]) => boolean, Col: Col, stack: () => NodeJS.CallSite[], underscoredIf: (string: string, condition?: boolean) => string, camelizeIf: (string: string, condition?: boolean) => string, Inflector: Inflector, useInflection: (inflection: Inflector) => void, mapWhereFieldNames: (attributes: object, model: typeof Model) => object, classToInvokable: <T extends {new(...args: any[]): any}>(ctor: T) => (T & {(...args: ConstructorParameters<T>): T}), Primitive: "string" | "number" | "boolean", removeTicks: (s: string, tickChar?: string) => string, defaultValueSchemable: (hash: DataType) => boolean, combineTableNames: (tableName1: string, tableName2: string) => string, isPrimitive: (val: unknown) => val is Primitive, camelize: (str: string) => string, mapFinderOptions: <T extends OptionsForMapping>(options: T, model: typeof Model) => T, pluralize: (s: string) => string, singularize: (s: string) => string, format: (arr: string[], dialect: string) => string, SequelizeMethod: SequelizeMethod, formatNamedParameters: (sql: string, parameters: {[p: string]: string | number | boolean}, dialect: string) => string, OptionsForMapping: OptionsForMapping, Cast: Cast, Promise: any, isColString: (value: string) => boolean, mapValueFieldNames: (dataValues: object, fields: string[], model: typeof Model) => object, Fn: Fn, Literal: Literal, toDefaultValue: <T>(value: unknown) => unknown, now: (dialect: string) => Date, mergeDefaults: <T>(a: T, b: Partial<T>) => T, mapOptionFieldNames: <T extends OptionsForMapping>(options: T, model: typeof Model) => T, addTicks: (s: string, tickChar?: string) => string, Where: Where, spliceStr: (str: string, index: number, count: number, add: string) => string, TICK_CHAR: string, cloneDeep: <T>(obj: T, fn?: (el: unknown) => unknown) => T, Json: Json}, Op: {readonly adjacent: typeof adjacent, readonly all: typeof all, readonly and: typeof and, readonly any: typeof any, readonly between: typeof between, readonly col: typeof col, readonly contained: typeof contained, readonly contains: typeof contains, readonly endsWith: typeof endsWith, readonly eq: typeof eq, readonly gt: typeof gt, readonly gte: typeof gte, readonly iLike: typeof iLike, readonly in: typeof in, readonly iRegexp: typeof iRegexp, readonly is: typeof is, readonly like: typeof like, readonly lt: typeof lt, readonly lte: typeof lte, readonly ne: typeof ne, readonly noExtendLeft: typeof noExtendLeft, readonly noExtendRight: typeof noExtendRight, readonly not: typeof not, readonly notBetween: typeof notBetween, readonly notILike: typeof notILike, readonly notIn: typeof notIn, readonly notIRegexp: typeof notIRegexp, readonly notLike: typeof notLike, readonly notRegexp: typeof notRegexp, readonly or: typeof or, readonly overlap: typeof overlap, readonly placeholder: typeof placeholder, readonly regexp: typeof regexp, readonly startsWith: typeof startsWith, readonly strictLeft: typeof strictLeft, readonly strictRight: typeof strictRight, readonly substring: typeof substring, readonly values: typeof values}, IndexHints: IndexHints, Promise: any, validator: Validator, Deferrable: {SET_IMMEDIATE: SetImmediateDeferrableStatic, Deferrable: Deferrable, AbstractDeferrableStatic: AbstractDeferrableStatic, InitiallyImmediateDeferrableStatic: InitiallyImmediateDeferrableStatic, SetDeferredDeferrableStatic: SetDeferredDeferrableStatic, SetImmediateDeferrable: SetImmediateDeferrable, INITIALLY_IMMEDIATE: InitiallyImmediateDeferrableStatic, INITIALLY_DEFERRED: InitiallyDeferredDeferrableStatic, SetDeferredDeferrable: SetDeferredDeferrable, SET_DEFERRED: SetDeferredDeferrableStatic, NotDeferrableStatic: NotDeferrableStatic, NOT: NotDeferrableStatic, InitiallyDeferredDeferrableStatic: InitiallyDeferredDeferrableStatic, SetImmediateDeferrableStatic: SetImmediateDeferrableStatic, NotDeferrable: NotDeferrable, InitiallyImmediateDeferrable: InitiallyImmediateDeferrable, InitiallyDeferredDeferrable: InitiallyDeferredDeferrable}, Error: BaseError, TableHints: TableHints, DataTypes: {MediumIntegerDataTypeConstructor: MediumIntegerDataTypeConstructor, VirtualDataType: VirtualDataType, EnumDataTypeConstructor: EnumDataTypeConstructor, BlobSize: "tiny" | "medium" | "long", BlobDataTypeConstructor: BlobDataTypeConstructor, GeometryDataTypeOptions: GeometryDataTypeOptions, DecimalDataTypeOptions: DecimalDataTypeOptions, MACADDR: AbstractDataTypeConstructor, DataType: string | AbstractDataTypeConstructor | AbstractDataType, RangeDataTypeConstructor: RangeDataTypeConstructor, GEOGRAPHY: GeographyDataTypeConstructor, TIME: AbstractDataTypeConstructor, NumberDataType: NumberDataType, NumberDataTypeOptions: NumberDataTypeOptions, ArrayDataType: ArrayDataType, UUIDV4: AbstractDataTypeConstructor, CharDataTypeOptions: CharDataTypeOptions, RangeDataType: RangeDataType, DATE: DateDataTypeConstructor, ArrayDataTypeConstructor: ArrayDataTypeConstructor, DOUBLE: DoubleDataTypeConstructor, SmallIntegerDataType: SmallIntegerDataType, UUIDV1: AbstractDataTypeConstructor, FloatDataTypeOptions: FloatDataTypeOptions, RANGE: RangeDataTypeConstructor, HSTORE: AbstractDataTypeConstructor, TinyIntegerDataType: TinyIntegerDataType, BLOB: BlobDataTypeConstructor, CharDataTypeConstructor: CharDataTypeConstructor, RealDataTypeOptions: RealDataTypeOptions, DoubleDataType: DoubleDataType, VirtualDataTypeConstructor: VirtualDataTypeConstructor, DateDataTypeConstructor: DateDataTypeConstructor, TextLength: "tiny" | "medium" | "long", UUID: AbstractDataTypeConstructor, StringDataTypeOptions: StringDataTypeOptions, JSON: AbstractDataTypeConstructor, EnumDataType: EnumDataType, DateOnlyDataType: DateOnlyDataType, GEOMETRY: GeometryDataTypeConstructor, DecimalDataType: DecimalDataType, DECIMAL: DecimalDataTypeConstructor, NumberDataTypeConstructor: NumberDataTypeConstructor, REAL: RealDataTypeConstructor, BlobDataTypeOptions: BlobDataTypeOptions, GeographyDataTypeOptions: GeographyDataTypeOptions, ABSTRACT: AbstractDataTypeConstructor, RealDataTypeConstructor: RealDataTypeConstructor, CharDataType: CharDataType, FloatDataType: FloatDataType, DateDataTypeOptions: DateDataTypeOptions, GeometryDataType: GeometryDataType, TinyIntegerDataTypeConstructor: TinyIntegerDataTypeConstructor, CHAR: CharDataTypeConstructor, StringDataTypeConstructor: StringDataTypeConstructor, CITEXT: AbstractDataTypeConstructor, ENUM: EnumDataTypeConstructor, NOW: AbstractDataTypeConstructor, DateDataType: DateDataType, IntegerDataTypeConstructor: IntegerDataTypeConstructor, TextDataTypeOptions: TextDataTypeOptions, StringDataType: StringDataType, INTEGER: IntegerDataTypeConstructor, GeometryDataTypeConstructor: GeometryDataTypeConstructor, RealDataType: RealDataType, MEDIUMINT: MediumIntegerDataTypeConstructor, AbstractDataTypeConstructor: AbstractDataTypeConstructor, RangeDataTypeOptions: RangeDataTypeOptions, NUMBER: NumberDataTypeConstructor, DateOnlyDataTypeConstructor: DateOnlyDataTypeConstructor, DATEONLY: DateOnlyDataTypeConstructor, DataTypeAbstract: AbstractDataTypeConstructor, AbstractDataType: AbstractDataType, BigIntDataType: BigIntDataType, DoubleDataTypeOptions: DoubleDataTypeOptions, INET: AbstractDataTypeConstructor, TextDataTypeConstructor: TextDataTypeConstructor, SMALLINT: SmallIntegerDataTypeConstructor, BOOLEAN: AbstractDataTypeConstructor, BIGINT: BigIntDataTypeConstructor, FloatDataTypeConstructor: FloatDataTypeConstructor, ArrayDataTypeOptions: ArrayDataTypeOptions, BigIntDataTypeConstructor: BigIntDataTypeConstructor, CIDR: AbstractDataTypeConstructor, TextDataType: TextDataType, MediumIntegerDataType: MediumIntegerDataType, JSONB: AbstractDataTypeConstructor, IntegerDataType: IntegerDataType, ARRAY: ArrayDataTypeConstructor, DoubleDataTypeConstructor: DoubleDataTypeConstructor, VIRTUAL: VirtualDataTypeConstructor, SmallIntegerDataTypeConstructor: SmallIntegerDataTypeConstructor, STRING: StringDataTypeConstructor, GeographyDataType: GeographyDataType, IntegerDataTypeOptions: IntegerDataTypeOptions, BlobDataType: BlobDataType, GeographyDataTypeConstructor: GeographyDataTypeConstructor, RangeableDataType: IntegerDataTypeConstructor | IntegerDataType | BigIntDataTypeConstructor | BigIntDataType | DecimalDataTypeConstructor | DecimalDataType | DateOnlyDataTypeConstructor | DateOnlyDataType | DateDataTypeConstructor | DateDataType, EnumDataTypeOptions: EnumDataTypeOptions, FLOAT: FloatDataTypeConstructor, DecimalDataTypeConstructor: DecimalDataTypeConstructor, TEXT: TextDataTypeConstructor, TINYINT: TinyIntegerDataTypeConstructor}, SyncOptions: SyncOptions, OperatorsAliases: OperatorsAliases, or: (...args: WhereOperators | WhereAttributeHash | Where[]) => OrOperator, DefaultSetOptions: DefaultSetOptions, ReplicationOptions: ReplicationOptions, Config: Config, AttributeType: Fn | Col | Literal | ModelAttributeColumnOptions | string, Options: Options, literal: (val: string) => Literal, where: (attr: AttributeType, comparator: string, logic: LogicType) => Where, Sequelize: Sequelize, RetryOptions: RetryOptions, Dialect: "mysql" | "postgres" | "sqlite" | "mariadb" | "mssql", col: (col: string) => Col, QueryOptionsTransactionRequired: QueryOptionsTransactionRequired, ConnectionOptions: ConnectionOptions, and: (...args: WhereOperators | WhereAttributeHash | Where[]) => AndOperator, cast: (val: unknown, type: string) => Cast, PoolOptions: PoolOptions, json: (conditionsOrPath: (string | object), value?: (string | number | boolean)) => Json, fn: (fn: string, ...args: unknown[]) => Fn, LogicType: Fn | Col | Literal | OrOperator | AndOperator | WhereOperators | string, AddForeignKeyConstraintOptions: AddForeignKeyConstraintOptions, QueryInterfaceCreateTableOptions: QueryInterfaceCreateTableOptions, IndexMethod: "BTREE" | "HASH" | "GIST" | "SPGIST" | "GIN" | "BRIN" | string, IndexesOptions: IndexesOptions, QueryOptionsWithForce: QueryOptionsWithForce, QueryOptionsWithWhere: QueryOptionsWithWhere, BindOrReplacements: {[p: string]: unknown} | unknown[], FunctionParam: FunctionParam, QueryInterfaceOptions: QueryInterfaceOptions, QueryInterfaceDropTableOptions: QueryInterfaceDropTableOptions, AddCheckConstraintOptions: AddCheckConstraintOptions, IndexType: "UNIQUE" | "FULLTEXT" | "SPATIAL", QueryOptionsWithType: QueryOptionsWithType, CollateCharsetOptions: CollateCharsetOptions, AddUniqueConstraintOptions: AddUniqueConstraintOptions, AddPrimaryKeyConstraintOptions: AddPrimaryKeyConstraintOptions, QueryInterfaceDropAllTablesOptions: QueryInterfaceDropAllTablesOptions, QueryOptionsWithModel: QueryOptionsWithModel, QueryOptions: QueryOptions, QueryInterfaceIndexOptions: QueryInterfaceIndexOptions, AddDefaultConstraintOptions: AddDefaultConstraintOptions, CreateDatabaseOptions: CreateDatabaseOptions, QueryInterface: QueryInterface, AddConstraintOptions: AddUniqueConstraintOptions | AddDefaultConstraintOptions | AddCheckConstraintOptions | AddPrimaryKeyConstraintOptions | AddForeignKeyConstraintOptions, MediumIntegerDataTypeConstructor: MediumIntegerDataTypeConstructor, VirtualDataType: VirtualDataType, EnumDataTypeConstructor: EnumDataTypeConstructor, BlobSize: "tiny" | "medium" | "long", BlobDataTypeConstructor: BlobDataTypeConstructor, GeometryDataTypeOptions: GeometryDataTypeOptions, DecimalDataTypeOptions: DecimalDataTypeOptions, MACADDR: AbstractDataTypeConstructor, DataType: string | AbstractDataTypeConstructor | AbstractDataType, RangeDataTypeConstructor: RangeDataTypeConstructor, GEOGRAPHY: GeographyDataTypeConstructor, TIME: AbstractDataTypeConstructor, NumberDataType: NumberDataType, NumberDataTypeOptions: NumberDataTypeOptions, ArrayDataType: ArrayDataType, UUIDV4: AbstractDataTypeConstructor, CharDataTypeOptions: CharDataTypeOptions, RangeDataType: RangeDataType, DATE: DateDataTypeConstructor, ArrayDataTypeConstructor: ArrayDataTypeConstructor, DOUBLE: DoubleDataTypeConstructor, SmallIntegerDataType: SmallIntegerDataType, UUIDV1: AbstractDataTypeConstructor, FloatDataTypeOptions: FloatDataTypeOptions, RANGE: RangeDataTypeConstructor, HSTORE: AbstractDataTypeConstructor, TinyIntegerDataType: TinyIntegerDataType, BLOB: BlobDataTypeConstructor, CharDataTypeConstructor: CharDataTypeConstructor, RealDataTypeOptions: RealDataTypeOptions, DoubleDataType: DoubleDataType, VirtualDataTypeConstructor: VirtualDataTypeConstructor, DateDataTypeConstructor: DateDataTypeConstructor, TextLength: "tiny" | "medium" | "long", UUID: AbstractDataTypeConstructor, StringDataTypeOptions: StringDataTypeOptions, JSON: AbstractDataTypeConstructor, EnumDataType: EnumDataType, DateOnlyDataType: DateOnlyDataType, GEOMETRY: GeometryDataTypeConstructor, DecimalDataType: DecimalDataType, DECIMAL: DecimalDataTypeConstructor, NumberDataTypeConstructor: NumberDataTypeConstructor, REAL: RealDataTypeConstructor, BlobDataTypeOptions: BlobDataTypeOptions, GeographyDataTypeOptions: GeographyDataTypeOptions, ABSTRACT: AbstractDataTypeConstructor, RealDataTypeConstructor: RealDataTypeConstructor, CharDataType: CharDataType, FloatDataType: FloatDataType, DateDataTypeOptions: DateDataTypeOptions, GeometryDataType: GeometryDataType, TinyIntegerDataTypeConstructor: TinyIntegerDataTypeConstructor, CHAR: CharDataTypeConstructor, StringDataTypeConstructor: StringDataTypeConstructor, CITEXT: AbstractDataTypeConstructor, ENUM: EnumDataTypeConstructor, NOW: AbstractDataTypeConstructor, DateDataType: DateDataType, IntegerDataTypeConstructor: IntegerDataTypeConstructor, TextDataTypeOptions: TextDataTypeOptions, StringDataType: StringDataType, INTEGER: IntegerDataTypeConstructor, GeometryDataTypeConstructor: GeometryDataTypeConstructor, RealDataType: RealDataType, MEDIUMINT: MediumIntegerDataTypeConstructor, AbstractDataTypeConstructor: AbstractDataTypeConstructor, RangeDataTypeOptions: RangeDataTypeOptions, NUMBER: NumberDataTypeConstructor, DateOnlyDataTypeConstructor: DateOnlyDataTypeConstructor, DATEONLY: DateOnlyDataTypeConstructor, DataTypeAbstract: AbstractDataTypeConstructor, AbstractDataType: AbstractDataType, BigIntDataType: BigIntDataType, DoubleDataTypeOptions: DoubleDataTypeOptions, INET: AbstractDataTypeConstructor, TextDataTypeConstructor: TextDataTypeConstructor, SMALLINT: SmallIntegerDataTypeConstructor, BOOLEAN: AbstractDataTypeConstructor, BIGINT: BigIntDataTypeConstructor, FloatDataTypeConstructor: FloatDataTypeConstructor, ArrayDataTypeOptions: ArrayDataTypeOptions, BigIntDataTypeConstructor: BigIntDataTypeConstructor, CIDR: AbstractDataTypeConstructor, TextDataType: TextDataType, MediumIntegerDataType: MediumIntegerDataType, JSONB: AbstractDataTypeConstructor, IntegerDataType: IntegerDataType, ARRAY: ArrayDataTypeConstructor, DoubleDataTypeConstructor: DoubleDataTypeConstructor, VIRTUAL: VirtualDataTypeConstructor, SmallIntegerDataTypeConstructor: SmallIntegerDataTypeConstructor, STRING: StringDataTypeConstructor, GeographyDataType: GeographyDataType, IntegerDataTypeOptions: IntegerDataTypeOptions, BlobDataType: BlobDataType, GeographyDataTypeConstructor: GeographyDataTypeConstructor, RangeableDataType: IntegerDataTypeConstructor | IntegerDataType | BigIntDataTypeConstructor | BigIntDataType | DecimalDataTypeConstructor | DecimalDataType | DateOnlyDataTypeConstructor | DateOnlyDataType | DateDataTypeConstructor | DateDataType, EnumDataTypeOptions: EnumDataTypeOptions, FLOAT: FloatDataTypeConstructor, DecimalDataTypeConstructor: DecimalDataTypeConstructor, TEXT: TextDataTypeConstructor, TINYINT: TinyIntegerDataTypeConstructor, AnyOperator: AnyOperator, Order: string | Fn | Col | Literal | OrderItem[], SetOptions: SetOptions, Includeable: Model | Association<Model, Model> | IncludeOptions | {all: true} | string, AggregateOptions: AggregateOptions, InstanceUpdateOptions: InstanceUpdateOptions, WhereValue: string | number | boolean | WhereOperators | WhereAttributeHash | Col | Fn | OrOperator | AndOperator | WhereGeometryOptions | (string | number | WhereAttributeHash)[], AndOperator: AndOperator, WhereOptions: WhereAttributeHash | AndOperator | OrOperator | Literal | Where, Identifier: number | string | Buffer, OrOperator: OrOperator, ModelScopeOptions: ModelScopeOptions, Silent: Silent, BuildOptions: BuildOptions, FindOrCreateOptions: FindOrCreateOptions, ProjectionAlias: [(string | Literal | Fn), string], OrderItem: string | Fn | Col | Literal | [(string | Col | Fn | Literal), string] | [(Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal)] | [(Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal), string] | [(Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal)] | [(Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal), string] | [(Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal)] | [(Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal), string] | [(Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal)] | [(Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (Model | {model: typeof Model, as: string} | string), (string | Col | Fn | Literal), string], BulkCreateOptions: BulkCreateOptions, RestoreOptions: RestoreOptions, CountOptions: CountOptions, InitOptions: InitOptions, IndexHintable: IndexHintable, FindAttributeOptions: (string | ProjectionAlias)[] | {exclude: string[], include?: (string | ProjectionAlias)[]} | {exclude?: string[], include: (string | ProjectionAlias)[]}, TruncateOptions: TruncateOptions, InstanceDestroyOptions: InstanceDestroyOptions, Filterable: Filterable, Logging: Logging, IncrementDecrementOptions: IncrementDecrementOptions, ColumnOptions: ColumnOptions, Rangable: [number, number] | [Date, Date] | Literal, ModelOptions: ModelOptions, Paranoid: Paranoid, Projectable: Projectable, DropOptions: DropOptions, IncludeThroughOptions: IncludeThroughOptions, ModelGetterOptions: ModelGetterOptions, ModelType: Model, ModelAttributeColumnOptions: ModelAttributeColumnOptions, CreateOptions: CreateOptions, ModelNameOptions: ModelNameOptions, ModelAttributes: ModelAttributes, CountWithOptions: CountWithOptions, AddScopeOptions: AddScopeOptions, ModelAttributeColumnReferencesOptions: ModelAttributeColumnReferencesOptions, ScopeOptions: ScopeOptions, ModelIndexesOptions: IndexesOptions, Poolable: Poolable, SchemaOptions: SchemaOptions, ModelValidateOptions: ModelValidateOptions, InstanceRestoreOptions: InstanceRestoreOptions, FindOptions: FindOptions, AllOperator: AllOperator, GroupOption: string | Fn | Col | (string | Fn | Col)[], SaveOptions: SaveOptions, DestroyOptions: DestroyOptions, NonNullFindOptions: NonNullFindOptions, IncludeOptions: IncludeOptions, ModelCtor: {new(): M} & Model, ModelSetterOptions: ModelSetterOptions, SearchPathable: SearchPathable, UpdateOptions: UpdateOptions, IndexHint: IndexHint, WhereAttributeHash: WhereAttributeHash, WhereGeometryOptions: WhereGeometryOptions, Model: Model, Transactionable: Transactionable, WhereOperators: WhereOperators, UpsertOptions: UpsertOptions, FindAndCountOptions: FindAndCountOptions, IncrementDecrementOptionsWithBy: IncrementDecrementOptionsWithBy, Transaction: Transaction, TransactionOptions: TransactionOptions, Association: Association, AssociationOptions: AssociationOptions, AssociationScope: AssociationScope, MultiAssociationAccessors: MultiAssociationAccessors, SingleAssociationAccessors: SingleAssociationAccessors, ForeignKeyOptions: ForeignKeyOptions, ManyToManyOptions: ManyToManyOptions, BelongsTo: BelongsTo, BelongsToCreateAssociationMixinOptions: BelongsToCreateAssociationMixinOptions, BelongsToCreateAssociationMixin: (values?: {[p: string]: unknown}, options?: BelongsToCreateAssociationMixinOptions) => Promise<TModel>, BelongsToGetAssociationMixin: (options?: BelongsToGetAssociationMixinOptions) => Promise<TModel>, BelongsToGetAssociationMixinOptions: BelongsToGetAssociationMixinOptions, BelongsToOptions: BelongsToOptions, BelongsToSetAssociationMixinOptions: BelongsToSetAssociationMixinOptions, BelongsToSetAssociationMixin: (newAssociation?: (TModel | TPrimaryKey), options?: BelongsToSetAssociationMixinOptions) => Promise<void>, HasOneGetAssociationMixinOptions: HasOneGetAssociationMixinOptions, HasOne: HasOne, HasOneSetAssociationMixinOptions: HasOneSetAssociationMixinOptions, HasOneOptions: HasOneOptions, HasOneCreateAssociationMixin: (values?: {[p: string]: unknown}, options?: HasOneCreateAssociationMixinOptions) => Promise<TModel>, HasOneSetAssociationMixin: (newAssociation?: (TModel | TModelPrimaryKey), options?: HasOneSetAssociationMixinOptions) => Promise<void>, HasOneGetAssociationMixin: (options?: HasOneGetAssociationMixinOptions) => Promise<TModel>, HasOneCreateAssociationMixinOptions: HasOneCreateAssociationMixinOptions, HasManyCountAssociationsMixin: (options?: HasManyCountAssociationsMixinOptions) => Promise<number>, HasManyCreateAssociationMixin: (values?: {[p: string]: unknown}, options?: HasManyCreateAssociationMixinOptions) => Promise<TModel>, HasManySetAssociationsMixin: (newAssociations?: (TModel | TModelPrimaryKey)[], options?: HasManySetAssociationsMixinOptions) => Promise<void>, HasManyGetAssociationsMixin: (options?: HasManyGetAssociationsMixinOptions) => Promise<TModel[]>, HasManyAddAssociationMixinOptions: HasManyAddAssociationMixinOptions, HasManyHasAssociationMixin: (target: (TModel | TModelPrimaryKey), options?: HasManyHasAssociationMixinOptions) => Promise<boolean>, HasMany: HasMany, HasManyOptions: HasManyOptions, HasManyHasAssociationMixinOptions: HasManyHasAssociationMixinOptions, HasManyCreateAssociationMixinOptions: HasManyCreateAssociationMixinOptions, HasManySetAssociationsMixinOptions: HasManySetAssociationsMixinOptions, HasManyGetAssociationsMixinOptions: HasManyGetAssociationsMixinOptions, HasManyRemoveAssociationMixin: (oldAssociated?: (TModel | TModelPrimaryKey), options?: HasManyRemoveAssociationMixinOptions) => Promise<void>, HasManyRemoveAssociationMixinOptions: HasManyRemoveAssociationMixinOptions, HasManyAddAssociationsMixin: (newAssociations?: (TModel | TModelPrimaryKey)[], options?: HasManyAddAssociationsMixinOptions) => Promise<void>, HasManyCountAssociationsMixinOptions: HasManyCountAssociationsMixinOptions, HasManyRemoveAssociationsMixin: (oldAssociateds?: (TModel | TModelPrimaryKey)[], options?: HasManyRemoveAssociationsMixinOptions) => Promise<void>, HasManyHasAssociationsMixinOptions: HasManyHasAssociationsMixinOptions, HasManyRemoveAssociationsMixinOptions: HasManyRemoveAssociationsMixinOptions, HasManyAddAssociationMixin: (newAssociation?: (TModel | TModelPrimaryKey), options?: HasManyAddAssociationMixinOptions) => Promise<void>, HasManyAddAssociationsMixinOptions: HasManyAddAssociationsMixinOptions, HasManyHasAssociationsMixin: (targets: (TModel | TModelPrimaryKey)[], options?: HasManyHasAssociationsMixinOptions) => Promise<boolean>, BelongsToManyCreateAssociationMixin: (values?: {[p: string]: unknown}, options?: BelongsToManyCreateAssociationMixinOptions) => Promise<TModel>, BelongsToMany: BelongsToMany, BelongsToManyRemoveAssociationsMixin: (oldAssociateds?: (TModel | TModelPrimaryKey)[], options?: BelongsToManyRemoveAssociationsMixinOptions) => Promise<void>, BelongsToManyOptions: BelongsToManyOptions, BelongsToManyAddAssociationMixinOptions: BelongsToManyAddAssociationMixinOptions, BelongsToManyRemoveAssociationsMixinOptions: BelongsToManyRemoveAssociationsMixinOptions, BelongsToManyAddAssociationMixin: (newAssociation?: (TModel | TModelPrimaryKey), options?: BelongsToManyAddAssociationMixinOptions) => Promise<void>, BelongsToManyAddAssociationsMixinOptions: BelongsToManyAddAssociationsMixinOptions, BelongsToManyAddAssociationsMixin: (newAssociations?: (TModel | TModelPrimaryKey)[], options?: BelongsToManyAddAssociationsMixinOptions) => Promise<void>, BelongsToManyCreateAssociationMixinOptions: BelongsToManyCreateAssociationMixinOptions, BelongsToManyGetAssociationsMixin: (options?: BelongsToManyGetAssociationsMixinOptions) => Promise<TModel[]>, ThroughOptions: ThroughOptions, BelongsToManyRemoveAssociationMixin: (oldAssociated?: (TModel | TModelPrimaryKey), options?: BelongsToManyRemoveAssociationMixinOptions) => Promise<void>, BelongsToManyHasAssociationMixinOptions: BelongsToManyHasAssociationMixinOptions, BelongsToManyHasAssociationsMixin: (targets: (TModel | TModelPrimaryKey)[], options?: BelongsToManyHasAssociationsMixinOptions) => Promise<boolean>, BelongsToManyHasAssociationMixin: (target: (TModel | TModelPrimaryKey), options?: BelongsToManyHasAssociationMixinOptions) => Promise<boolean>, BelongsToManyHasAssociationsMixinOptions: BelongsToManyHasAssociationsMixinOptions, JoinTableAttributes: JoinTableAttributes, BelongsToManyCountAssociationsMixin: (options?: BelongsToManyCountAssociationsMixinOptions) => Promise<number>, BelongsToManySetAssociationsMixinOptions: BelongsToManySetAssociationsMixinOptions, BelongsToManyGetAssociationsMixinOptions: BelongsToManyGetAssociationsMixinOptions, BelongsToManyRemoveAssociationMixinOptions: BelongsToManyRemoveAssociationMixinOptions, BelongsToManyCountAssociationsMixinOptions: BelongsToManyCountAssociationsMixinOptions, BelongsToManySetAssociationsMixin: (newAssociations?: (TModel | TModelPrimaryKey)[], options?: BelongsToManySetAssociationsMixinOptions) => Promise<void>, ValidationError: ValidationError, DatabaseError: DatabaseError, UniqueConstraintErrorOptions: UniqueConstraintErrorOptions, UniqueConstraintError: UniqueConstraintError, CommonErrorProperties: CommonErrorProperties, ConnectionError: ConnectionError, EmptyResultError: EmptyResultError, TimeoutError: TimeoutError, InvalidConnectionError: InvalidConnectionError, BaseError: BaseError, ExclusionConstraintError: ExclusionConstraintError, HostNotFoundError: HostNotFoundError, HostNotReachableError: HostNotReachableError, OptimisticLockError: OptimisticLockError, ValidationErrorItem: ValidationErrorItem, SequelizeScopeError: SequelizeScopeError, ConnectionRefusedError: ConnectionRefusedError, AccessDeniedError: AccessDeniedError, ForeignKeyConstraintError: ForeignKeyConstraintError, ConnectionTimedOutError: ConnectionTimedOutError}}
 */
const Sequelize = require('sequelize');  // 引用sequelize

const conf = {
    host: 'localhost',
    dialect: 'mysql'  // 指定数据库类型
};

// 线上环境使用连接池
conf.pool = {
    max: 5, // 连接池中最大的连接数量
    min: 0, // 连接池中最小的连接数量
    idle: 10000 // 如果一个连接池10s内没有被使用，则释放
};

const seq = new Sequelize('koa2_weibo_db', 'root', 'zx360828htc', conf);  // 数据库配置

// seq.authenticate().then(() => {
//     console.log('ok')
// }).catch(() => {
//     console.log('err')
// });

module.exports = seq;  // 导出实例